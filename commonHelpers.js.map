{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate;\n\nconst startBtn = document.querySelector('[data-start]');\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst days = document.querySelector('[data-days]');\nconst hours = document.querySelector('[data-hours]');\nconst minutes = document.querySelector('[data-minutes]');\nconst seconds = document.querySelector('[data-seconds]');\n\nstartBtn.addEventListener('click', () => {\n  datetimePicker.disabled = true;\n  startBtn.disabled = true;\n  const intervalId = setInterval(() => {\n    let currentDate = Date.now();\n    let leftDate = userSelectedDate - currentDate;\n    let parsedLeftDate = convertMs(leftDate);\n    days.textContent = addLeadingZero(parsedLeftDate.days);\n    hours.textContent = addLeadingZero(parsedLeftDate.hours);\n    minutes.textContent = addLeadingZero(parsedLeftDate.minutes);\n    seconds.textContent = addLeadingZero(parsedLeftDate.seconds);\n    if (leftDate < 1000) clearInterval(intervalId);\n  }, 1000);\n});\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (Number(Date.now()) > Number(selectedDates[0])) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      startBtn.disabled = true;\n    } else {\n      userSelectedDate = selectedDates[0];\n      startBtn.disabled = false;\n    }\n  },\n};\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nflatpickr(datetimePicker, options);\n"],"names":["userSelectedDate","startBtn","datetimePicker","days","hours","minutes","seconds","intervalId","currentDate","leftDate","parsedLeftDate","convertMs","addLeadingZero","options","selectedDates","iziToast","ms","value","flatpickr"],"mappings":"2FAKA,IAAIA,EAEJ,MAAMC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAO,SAAS,cAAc,aAAa,EAC3CC,EAAQ,SAAS,cAAc,cAAc,EAC7CC,EAAU,SAAS,cAAc,gBAAgB,EACjDC,EAAU,SAAS,cAAc,gBAAgB,EAEvDL,EAAS,iBAAiB,QAAS,IAAM,CACvCC,EAAe,SAAW,GAC1BD,EAAS,SAAW,GACpB,MAAMM,EAAa,YAAY,IAAM,CACnC,IAAIC,EAAc,KAAK,MACnBC,EAAWT,EAAmBQ,EAC9BE,EAAiBC,EAAUF,CAAQ,EACvCN,EAAK,YAAcS,EAAeF,EAAe,IAAI,EACrDN,EAAM,YAAcQ,EAAeF,EAAe,KAAK,EACvDL,EAAQ,YAAcO,EAAeF,EAAe,OAAO,EAC3DJ,EAAQ,YAAcM,EAAeF,EAAe,OAAO,EACvDD,EAAW,KAAM,cAAcF,CAAU,CAC9C,EAAE,GAAI,CACT,CAAC,EAED,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjB,OAAO,KAAK,IAAK,CAAA,EAAI,OAAOA,EAAc,CAAC,CAAC,GAC9CC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDd,EAAS,SAAW,KAEpBD,EAAmBc,EAAc,CAAC,EAClCb,EAAS,SAAW,GAEvB,CACH,EAEA,SAASU,EAAUK,EAAI,CAKrB,MAAMb,EAAO,KAAK,MAAMa,EAAK,KAAG,EAC1BZ,EAAQ,KAAK,MAAOY,EAAK,MAAO,IAAI,EACpCX,EAAU,KAAK,MAAQW,EAAK,MAAO,KAAQ,GAAM,EACjDV,EAAU,KAAK,MAASU,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAE,KAAAb,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASM,EAAeK,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEAC,EAAUhB,EAAgBW,CAAO"}